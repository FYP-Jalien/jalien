#handlers = alien.log.SevereFileHandler alien.log.WarningFileHandler alien.log.ConfigFileHandler alien.log.InfoFileHandler alien.log.FineFileHandler alien.log.FinerFileHandler alien.log.FinestFileHandler
#alien.site.CustomHandler

#java.util.logging.SimpleFormatter.format = %1$tc %2$s %4$s: [ %5$s ] %6 %n %7 %n

#alien.log.SevereFileHandler.formatter = java.util.logging.SimpleFormatter
#alien.log.SevereFileHandler.limit = 1000000
#alien.log.SevereFileHandler.count = 4
#alien.log.SevereFileHandler.append = true
#alien.log.SevereFileHandler.pattern = alien-severe%g.log

#alien.log.WarningFileHandler.formatter = java.util.logging.SimpleFormatter
#alien.log.WarningFileHandler.limit = 1000000
#alien.log.WarningFileHandler.count = 4
#alien.log.WarningFileHandler.append = true
#alien.log.WarningFileHandler.pattern = alien-warning%g.log

#alien.log.ConfigFileHandler.formatter = java.util.logging.SimpleFormatter
#alien.log.ConfigFileHandler.limit = 1000000
#alien.log.ConfigFileHandler.count = 4
#alien.log.ConfigFileHandler.append = true
#alien.log.ConfigFileHandler.pattern = alien-config%g.log

#alien.log.InfoFileHandler.formatter = java.util.logging.SimpleFormatter
#alien.log.InfoFileHandler.limit = 1000000
#alien.log.InfoFileHandler.count = 4
#alien.log.InfoFileHandler.append = true
#alien.log.InfoFileHandler.pattern = alien-info%g.log

#alien.log.FineFileHandler.formatter = java.util.logging.SimpleFormatter  
#alien.log.FineFileHandler.limit = 1000000
#alien.log.FineFileHandler.count = 4
#alien.log.FineFileHandler.append = true
#alien.log.FineFileHandler.pattern = alien-fine%g.log

#alien.log.FinerFileHandler.formatter = java.util.logging.SimpleFormatter
#alien.log.FinerFileHandler.limit = 1000000
#alien.log.FinerFileHandler.count = 4
#alien.log.FinerFileHandler.append = true
#alien.log.FinerFileHandler.pattern = alien-finer%g.log

#alien.log.FinestFileHandler.formatter = java.util.logging.SimpleFormatter
#alien.log.FinestFileHandler.limit = 1000000
#alien.log.FinestFileHandler.count = 4
#alien.log.FinestFileHandler.append = true
#alien.log.FinestFileHandler.pattern = alien-finest%g.log

#alien.site.CustomHandler.formatter = java.util.logging.SimpleFormatter
#alien.site.CustomHandler.limit = 1000000
#alien.site.CustomHandler.count = 4
#alien.site.CustomHandler.append = true
#alien.site.CustomHandler.pattern = CE%g.log

.level = WARNING
lia.level = WARNING
lazyj.level = WARNING
apmon.level = WARNING
alien.level = FINEST

alien.monitoring.Monitor.level = WARNING

# tell LazyJ to use the same logging facilities
use_java_logger=true

# declare the used serviceLoggers as comma-seperated list
serviceLoggers = JSh, JBox, JOptimizer, JobManager, JCentral

# service logger rules
#
# the current thread context must contain all strings indicated here in order for the logger to consume
# the log record. The matching is case insensitive and values can be seperated by commas and/or whitespaces
# The logger will keep all records, if no rules are specified
#
# Thread context is retreived by calling getThreadContext("loggingContext") (see Context.java) 
# and is expected to be empty/null or a comma-seperated list of context tags which can be referenced by the logging
# rules below. 
# 
# Note: Please make sure that all loggers have proper log rules! Empty logrules will result in having a logger which will
# accept records regardless of the current thread context (and this is meant to be handled by the default logger, which
# must not be declared)
JSh.logrules = JSh
JBox.logrules = JBox
JOptimizer.logrules = JOptimizer
JobManager.logrules = JobManager
JCentral.logrules = JCentral

JSh.level = WARN
JBox.level = WARN 

# service logger's output can be redirected. By default, their logs are put into alien-<loggername>.log.
# A new output file can be set by providing a .pattern property
JSh.pattern = serviceLogs/JSh/JSh.log
JBox.pattern = serviceLogs/JBox/JBox.log 
JOptimizer.pattern = serviceLogs/JOptimizer/JOptimizer.log
JobManager.pattern = serviceLogs/JobManager/JobManager.log
JCentral.pattern = serviceLogs/JCentral/JCentral.log

